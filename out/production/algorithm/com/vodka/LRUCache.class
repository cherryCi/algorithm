public class LRUCache {
    class Node {
        private int key;

        private int value;

        //前驱节点
        Node prev;

        //后驱节点
        Node next;

        public Node(int key, int value) {
            this.key = key;
            this.value = value;
        }
    }

    //保存链表的头节点和尾节点
    private Node first;
    private Node last;

    private int capacity;

    private Map<Integer, Node> localCache;

    public LRUCache(int k) {
        this.capacity = k;
        localCache = new HashMap<>();
    }


    public void put(int key, int value) {
        Node node = localCache.get(key);
        if (node != null) {
            node.value = value;
            moveToHead(node);
            return;
        }
        node = new Node(key, value);
        if (localCache.size() == capacity) {
            removeLast();
        }
        addToHead(node);
        localCache.put(key, node);
    }

    public int get(int key) {
        Node node = localCache.get(key);
        if (node == null) {
            return -1;
        }
        moveToHead(node);
        return node.value;
    }

    private void addToHead(Node node) {
        if (localCache.isEmpty()) {
            //代表当前无数据
            first = node;
            last = node;
            first.next = last;
            last.prev = first;
            return;
        }
        //代表当前有数据 头部节点的前驱节点是node node  的后驱节点是first
        first.prev = node;
        node.next = first;
        first = node;
    }

    /**
     * 移除链表的最后一个值
     */
    private void removeLast() {
        localCache.remove(last.key);
        Node prevNode = last.prev;
        if (prevNode != null) {
            prevNode.next = null;
            last = prevNode;
        }
    }

    private void moveToHead(Node node) {
        if (node == first) {
            return;
        }

        if (node == last) {
            //设置最后一个节点
            last.prev.next = null;
            last = last.prev;
        } else {
            //如果node 不是最后一个节点 需要转移到第一个节点地方
            node.prev.next = node.next;
            node.next.prev = node.prev;
        }
        node.prev = first.prev;
        node.next = first;
        first.prev = node;
        first = node;
    }


    public static void main(String[] args) {
        int[][] operators = new int[][]{
                        {1,1,1},
                        {1,2,2},
                        {1,3,2},
                        {2,1},
                        {1,4,4},
                        {2,2}
                };
        int[] ans = LRU(operators,3);
        for(int result:ans) {
            System.out.println(result);
        }

    }

    public static int[] LRU(int[][] operators, int k) {
        // write code here
        List<Integer> list = new ArrayList<>();
        LRUCache lru = new LRUCache(k);
        for (int[] op : operators) {
            int type = op[0];
            if (type == 1) {
                lru.put(op[1], op[2]);
            } else {
                list.add(lru.get(op[1]));
            }
        }
        int n = list.size();
        int[] ans = new int[n];
        for (int i = 0; i < n; i++) {
            ans[i] = list.get(i);
        }
        return ans;
    }

}
